<?php
 
use Phalcon\Mvc\Model\Criteria;
use Phalcon\Paginator\Adapter\Model as Paginator;


class UsersController extends ControllerBase
{
    /**
     * Index action
     */
    public function indexAction()
    {
        $numberPage = 1;
        if ($this->request->isPost()) {
            $query = Criteria::fromInput($this->di, 'Users', $_POST);
            $this->persistent->parameters = $query->getParams();
        } else {
            $numberPage = $this->request->getQuery("page", "int");
        }

        $parameters = $this->persistent->parameters;

        if (!is_array($parameters)) {
            $parameters = array();
        }
//        if (!array_key_exists('order',$_POST)) {//更新から戻ったときは検索クリア
//            $parameters = array();
//        }
        $parameters["order"] = "cd";

        $users = Users::find($parameters);
        if (count($users) == 0) {
            $this->flash->notice("検索の結果、ユーザーは０件でした。");
        }

        $paginator = new Paginator(array(
            'data' => $users,
            'limit'=> 10,
            'page' => $numberPage
        ));

        $this->view->page = $paginator->getPaginate();
    }

    /**
     * Searches for users
     */
    public function searchAction()
    {
        $this->persistent->parameters = null;
    }

    /**
     * Displays the creation form
     */
    public function newAction()
    {

    }

    /**
     * Edits a user
     *
     * @param string $id
     */
    public function editAction($id)
    {
        if (!$this->request->isPost()) {

            $user = Users::findFirstByid($id);
            if (!$user) {
                $this->flash->error("ユーザーが見つからなくなりました。");

                $this->dispatcher->forward(array(
                    'controller' => "users",
                    'action' => 'index'
                ));

                return;
            }

            $this->view->id = $user->id;

            $this->tag->setDefault("id", $user->id);
            $this->tag->setDefault("cd", $user->cd);
            $this->tag->setDefault("password", $user->password);
            $this->tag->setDefault("name", $user->name);
            $this->tag->setDefault("user_group_mr_cd", $user->user_group_mr_cd);
            $this->tag->setDefault("kaisi_bi", $user->kaisi_bi);
            $this->tag->setDefault("id_moto", $user->id_moto);
            $this->tag->setDefault("kinsi_flg", $user->kinsi_flg);
            $this->tag->setDefault("shuuryou_nitiji", $user->shuuryou_nitiji);
            $this->tag->setDefault("sakusei_user_id", $user->sakusei_user_id);
            $this->tag->setDefault("created", $user->created);
            $this->tag->setDefault("kousin_user_id", $user->kousin_user_id);
            $this->tag->setDefault("updated", $user->updated);
            
        }
    }

    /**
     * Edits a user PassWord
     *
     * @param string $id
     */
    public function editpwAction($id)
    {
        if (!$this->request->isPost()) {

            $user = Users::findFirstByid($id);
            if (!$user) {
                $this->flash->error("ユーザーが見つからなくなりました。");

                $this->dispatcher->forward(array(
                    'controller' => "users",
                    'action' => 'index'
                ));

                return;
            }

            $this->view->id = $user->id;

            $this->tag->setDefault("id", $user->id);
            $this->tag->setDefault("cd", $user->cd);
            $this->tag->setDefault("password", $user->password);
            $this->tag->setDefault("name", $user->name);
            $this->tag->setDefault("user_group_mr_name", $user->userGroupMrs->name);
            $this->tag->setDefault("created", $user->created);
            $this->tag->setDefault("updated", $user->updated);
            
        }
    }

    /**
     * Creates a new user
     */
    public function createAction()
    {
        if (!$this->request->isPost()) {
            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'index'
            ));

            return;
        }

        $password = $this->request->getPost("password");
        $repeatPassword = $this->request->getPost("repeatPassword");
        if ($password != $repeatPassword) {
            $this->flash->error('パスワードが再入力と違います。');
            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'new'
            ));
            return;
        }

        $user = new Users();
        $user->cd = $this->request->getPost("cd");
        $user->password = sha1($password);
        $user->name = $this->request->getPost("name");
        $user->user_group_mr_cd = $this->request->getPost("user_group_mr_cd");
        

        if (!$user->save()) {
            foreach ($user->getMessages() as $message) {
                $this->flash->error($message);
            }

            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'new'
            ));

            return;
        }

        $this->flash->success("ユーザーの作成が完了しました。");

        $this->dispatcher->forward(array(
            'controller' => "users",
            'action' => 'edit',
            'params' => array($user->id)
        ));
    }

    /**
     * Saves a user edited
     *
     */
    public function saveAction()
    {

        if (!$this->request->isPost()) {
            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'index'
            ));

            return;
        }

        $id = $this->request->getPost("id");
        $user = Users::findFirstByid($id);

        if (!$user) {
            $this->flash->error("ユーザーが見つからなくなりました。" . $id);

            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'index'
            ));

            return;
        }

        $post_user = ["cd","name","user_group_mr_cd"];
        $chg_flg = 0;
        foreach ($post_user as $post_fld) {
            if ($user->$post_fld != $this->request->getPost($post_fld)) {$chg_flg = 1; break;}
        }
        if ($chg_flg === 0) {
            $this->flash->error("変更がありません。" . $id);

            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'edit',
                'params' => array($user->id)
            ));

            return;
        }

        $this->_bakOut($user);

        foreach ($post_user as $post_fld) {
            $user->$post_fld = $this->request->getPost($post_fld);
        }

        if (!$user->save()) {

            foreach ($user->getMessages() as $message) {
                $this->flash->error($message);
            }

            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'edit',
                'params' => array($user->id)
            ));

            return;
        }

        $this->flash->success("ユーザー情報を更新しました。");

        $this->dispatcher->forward(array(
            'controller' => "users",
            'action' => 'edit',
            'params' => array($user->id)
        ));
    }

    /**
     * Saves a user password edited
     *
     */
    public function savepwAction()
    {

        if (!$this->request->isPost()) {
            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'edit',
                'params' => array($user->id)
            ));

            return;
        }

        $id = $this->request->getPost("id");
        $user = Users::findFirstByid($id);

        if (!$user) {
            $this->flash->error("user does not exist " . $id);

            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'edit',
                'params' => array($id)
            ));

            return;
        }

        $password = $this->request->getPost("password");
        $repeatPassword = $this->request->getPost("repeatPassword");
        if ($password != $repeatPassword) {
            $this->flash->error('パスワードが再入力と違います。');
            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'editpw',
                'params' => array($id)
            ));
            return;
        }

        $this->_bakOut($user);

        $user->password = sha1($password);

        if (!$user->save()) {

            foreach ($user->getMessages() as $message) {
                $this->flash->error($message);
            }

            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'editpw',
                'params' => array($id)
            ));

            return;
        }

        $this->flash->success("パスワードを変更しました。");

        $this->dispatcher->forward(array(
            'controller' => "users",
            'action' => 'edit',
            'params' => array($id)
        ));

    }

    /**
     * Deletes a user
     *
     * @param string $id
     */
    public function deleteAction($id)
    {
        $user = Users::findFirstByid($id);
        if (!$user) {
            $this->flash->error("user was not found");

            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'index'
            ));

            return;
        }

        if (!$user->delete()) {

            foreach ($user->getMessages() as $message) {
                $this->flash->error($message);
            }

            $this->dispatcher->forward(array(
                'controller' => "users",
                'action' => 'search'
            ));

            return;
        }

        $this->_bakOut($user, 1);

        $this->flash->success("ユーザーの削除を完了しました。");

        $this->dispatcher->forward(array(
            'controller' => "users",
            'action' => "index"
        ));

    }

    /**
     * Back Out a user
     *
     * @param string $user, $dlt_flg
     */
    public function _bakOut($user, $dlt_flg = 0)
    {

        $bak_user = new BakUsers();
        foreach ($user as $fld => $value) {
            $bak_user->$fld = $user->$fld;
        }
        $bak_user->id = NULL;
        $bak_user->id_moto = $user->id;
        $bak_user->kinsi_flg = $dlt_flg;
        $bak_user->shuuryou_nitiji = date("Y-m-d H:i:s");
        if (!$bak_user->save()) {
            foreach ($bak_user->getMessages() as $message) {
                $this->flash->error($message);
            }
        }
    }

}
